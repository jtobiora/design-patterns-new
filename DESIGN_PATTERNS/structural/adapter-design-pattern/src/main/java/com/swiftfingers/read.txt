                                     ADAPTER DESIGN PATTERN
The Adapter Design Pattern is part of structural patterns. It allows the interface of an existing class to be used as
another interface. It is used so that two unrelated interfaces can work together. The object that joins these
unrelated interface is called an Adapter.In summary, an adapter helps two incompatible interfaces to work together.

Adapter acts as a wrapper between two objects. It catches calls for one object and transforms them to format and
interface recognizable by the second object.

This pattern involves a single class which is responsible to join functionalities of independent or incompatible
interfaces.

       WHEN TO USE THE ADAPTER PATTERN
 1. When an outside component provides captivating functionality that we’d like to reuse, but it’s
    incompatible with our current application. A suitable Adapter can be developed to make them compatible with each
    other.

 2. When our application is not compatible with the interface that our client is expecting.

 3. When we want to reuse legacy code in our application without making any modification in the original code.

Notations:
1. Adaptee: An Adaptee is a class or interface we want to work with that offers the features we need e.g a
legacy code or a third party application, etc
2. Target Interface: A target interface is the class our clients expect to call. This is the class that needs
the features that the Adaptee brings and it is what the client invokes methods on. But because they have
incompatible interfaces, a middleman is needed.
3. Adapter: An Adapter is a bridge or middleman between the target interface and the Adaptee. It implements the
target interface and modifies the specific request available from the Adaptee class. Usually, it has an instance
of the Adaptee class passed to it so that it can call methods on the Adaptee. So generally, The Adapter
implements the target interface and holds an instance of the Adaptee.

     Client ------> Target interface <------- Adapter -------> Adaptee
Here is how the Client uses the Adapter
a. The client makes a request to the adapter by calling a method on it using the target interface.
b. The adapter translates the request into one or more calls on the adaptee using the adaptee interface.
c. The client receives the results of the call and never knows there is an adapter doing the translation.